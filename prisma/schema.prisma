generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id
  supabaseId String   @unique
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  tradeRecords TradeRecord[]
  tradeFiles   TradeFile[]
  chatMessages ChatMessage[]
  chatRooms    ChatRoom[]
  savedFilters SavedFilter[]

  @@map("users")
}

model TradeRecord {
  id          String   @id
  ticket      Int
  openTime    DateTime
  type        String
  size        Float
  item        String
  openPrice   Float
  stopLoss    Float?
  takeProfit  Float?
  closeTime   DateTime?
  closePrice  Float
  commission  Float?
  taxes       Float?
  swap        Float?
  profit      Float?
  userId      String
  tradeFileId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  tradeFile TradeFile @relation(fields: [tradeFileId], references: [id], onDelete: Cascade)

  @@index([userId])        // ユーザーごとの検索
  @@index([ticket])        // チケット番号で検索する可能性
  @@index([openTime])      // 日時ベースの検索用
  @@index([item])          // 通貨ペアでの集計用
  @@index([tradeFileId])   // ファイルごとの検索用
  @@unique([userId, ticket]) // ユーザーごとのチケット番号の一意性
  @@map("trade_records")
}

model TradeFile {
  id           String   @id
  fileName     String
  uploadDate   DateTime
  fileSize     Int
  fileType     String
  status       String   // 'pending' | 'processing' | 'completed' | 'failed'
  recordsCount Int      @default(0)
  errorMessage String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  tradeRecords TradeRecord[]

  @@index([userId])       // ユーザー別ファイル一覧表示など
  @@map("trade_files")
}

model ChatMessage {
  id         String   @id
  userId     String
  sender     String   // 'user' | 'ai'
  message    String
  chatRoomId String
  createdAt  DateTime @default(now())

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatRoomId])
  @@index([createdAt])
  @@map("chat_messages")
}

model ChatRoom {
  id         String        @id @default(cuid())
  title      String
  userId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatMessages ChatMessage[]

  @@index([userId])
  @@map("chat_rooms")
}

model SavedFilter {
  id          String   @id
  name        String   // フィルターの名前
  type        String   // 'dashboard' | 'trades' など、フィルターの種類
  filter      Json     // フィルター設定をJSON形式で保存
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("saved_filter")
}

