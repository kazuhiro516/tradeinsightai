generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id
  supabaseId        String              @unique
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  chatMessages      ChatMessage[]
  chatRooms         ChatRoom[]
  savedFilters      SavedFilter[]
  tradeFiles        TradeFile[]
  tradeRecords      TradeRecord[]
  user_mt4_accounts user_mt4_accounts[]
  aiModelSystemPrompt AIModelSystemPrompt?
  analysisReports   AnalysisReport[]
  practiceTrades    PracticeTrade[]

  @@map("users")
}

model TradeRecord {
  id          String    @id
  ticket      Int
  openTime    DateTime
  type        String
  size        Float
  item        String
  openPrice   Float
  stopLoss    Float?
  takeProfit  Float?
  closeTime   DateTime?
  closePrice  Float
  commission  Float?
  taxes       Float?
  swap        Float?
  profit      Float?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tradeFileId String
  tradeFile   TradeFile @relation(fields: [tradeFileId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, ticket])
  @@index([userId])
  @@index([ticket])
  @@index([openTime])
  @@index([item])
  @@index([tradeFileId])
  @@map("trade_records")
}

model TradeFile {
  id           String        @id
  fileName     String
  uploadDate   DateTime
  fileSize     Int
  fileType     String
  status       String
  recordsCount Int           @default(0)
  errorMessage String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  tradeRecords TradeRecord[]

  @@index([userId])
  @@map("trade_files")
}

model ChatMessage {
  id         String   @id
  userId     String
  sender     String
  message    String
  createdAt  DateTime @default(now())
  chatRoomId String
  metadata   Json?
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatRoomId])
  @@index([createdAt])
  @@map("chat_messages")
}

model ChatRoom {
  id           String        @id @default(cuid())
  title        String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chatMessages ChatMessage[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("chat_rooms")
}

model SavedFilter {
  id        String   @id
  name      String
  filter    Json
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_filter")
}

model user_mt4_accounts {
  id                        String   @id
  userId                    String
  broker                    String
  server                    String
  loginId                   String
  encryptedInvestorPassword String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  users                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIModelSystemPrompt {
  id           String   @id
  userId       String   @unique
  systemPrompt String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ai_model_system_prompts")
}

model AnalysisReport {
  id        String   @id
  title     String
  content   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("analysis_reports")
}

// FXトレード練習用テーブル
model PracticeTrade {
  id            String    @id @default(cuid())
  userId        String
  symbol        String    // 通貨ペア（例：USDJPY）
  timeframe     String    // 時間足（例：1m, 5m, 1h）
  entryTime     DateTime  // エントリー時間
  entryPrice    Float     // エントリー価格
  exitTime      DateTime? // エグジット時間
  exitPrice     Float?    // エグジット価格
  volume        Float     // ロット数
  tradeType     String    // トレードタイプ（BUY/SELL）
  profit        Float?    // 損益（自動計算）
  status        String    @default("OPEN") // OPEN/CLOSED
  memo          String?   @db.Text // メモ
  tags          String[]  // タグ配列
  stopLoss      Float?    // ストップロス価格
  takeProfit    Float?    // テイクプロフィット価格
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([entryTime])
  @@index([status])
  @@map("practice_trades")
}

// チャートデータ（OHLCV）
model OHLCVData {
  id        String @id @default(cuid())
  symbol    String // 通貨ペア（例：USDJPY）
  timeframe String // 時間足（例：1m, 5m, 1h）
  timestamp BigInt // UNIX秒（ミリ秒対応）
  open      Float  // 始値
  high      Float  // 高値
  low       Float  // 安値
  close     Float  // 終値
  volume    Float  // 出来高
  createdAt DateTime @default(now())

  @@unique([symbol, timeframe, timestamp])
  @@index([symbol, timeframe])
  @@index([timestamp])
  @@map("ohlcv_data")
}
