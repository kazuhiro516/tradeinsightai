'use client'

import { useState, useEffect, useCallback } from 'react'
import {
  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid,
  Tooltip, Legend, ResponsiveContainer, Cell
} from 'recharts'
import { useRouter } from 'next/navigation'
import { Filter } from 'lucide-react'
import { getCurrentUserId } from '@/utils/auth'
import { DashboardData, StatCardProps } from '@/types/dashboard'
import { TradeFilter, TradeRecord } from '@/types/trade'
import FilterModal from '@/app/components/FilterModal'
import { PAGINATION } from '@/constants/pagination'
import {
  formatMonthDay,
  formatYearMonth,
  formatYearMonthJP,
  formatDateOnly
} from '@/utils/date'
import { formatCurrency, formatPercent } from '@/utils/number'
import { buildTradeFilterParams } from '@/utils/tradeFilter'
import { CHART_COLORS, getChartColors } from '@/constants/chartColors'
import { Popover, PopoverTrigger, PopoverContent } from '@/app/components/ui/popover'
import { Skeleton } from '@/app/components/ui/Skeleton'
import { useTheme } from '@/app/providers/theme-provider'
import { createClient } from '@/utils/supabase/client'

// Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆË®≠ÂÆö
const supabase = createClient()

// „Éá„Éï„Ç©„É´„Éà„Éï„Ç£„É´„Çø„Éº„ÅÆË®≠ÂÆö
const DEFAULT_FILTER: TradeFilter = {
  page: PAGINATION.DEFAULT_PAGE,
  pageSize: PAGINATION.DEFAULT_PAGE_SIZE,
  sortBy: PAGINATION.DEFAULT_SORT_BY_OPEN_TIME,
  sortOrder: PAGINATION.DEFAULT_SORT_ORDER,
};

// „Ç´„Çπ„Çø„É†„Éö„Ç§„É≠„Éº„Éâ„ÅÆÂûãÂÆöÁæ©
// interface CustomPayload {
//   payload: {
//     cumulativeProfit?: number;
//     peak?: number;
//   };
//   value: number;
// }

// ÊåáÊ®ôË™¨Êòé„ÉªÂü∫Ê∫ñÂÄ§„Éû„ÉÉ„Éî„É≥„Ç∞
const STAT_CARD_DESCRIPTIONS: Record<string, { desc: string; criteria: string }> = {
  'Á∑èÂà©Áõä (Gross Profit)': {
    desc: 'Âãù„Å°„Éà„É¨„Éº„Éâ„Åã„ÇâÂæó„Çâ„Çå„ÅüÂà©Áõä„ÅÆÂêàË®àÈ°ç„Åß„Åô„ÄÇÂçòÁã¨„ÅßË©ï‰æ°„Åô„Çã„ÅÆ„ÅØÈÅ©Âàá„Åß„ÅØ„Å™„Åè„ÄÅÁ∑èÊêçÂ§±„Å®„ÅÆÊØîÁéáÔºà„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„ÉºÔºâ„Çí‰Ωµ„Åõ„Å¶Ë©ï‰æ°„Åó„Åæ„Åô„ÄÇ',
    criteria: '„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„Éº„Åå1.1ÔΩû1.5„ÅØÊ®ôÊ∫ñ„ÄÅ1.5‰ª•‰∏ä„ÅØÂÆâÂÆö„ÄÅ2.0‰ª•‰∏ä„ÅØÂÑ™ÁßÄ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'Á∑èÊêçÂ§± (Gross Loss)': {
    desc: 'Ë≤†„Åë„Éà„É¨„Éº„Éâ„ÅßË¢´„Å£„ÅüÊêçÂ§±„ÅÆÂêàË®àÈ°ç„Åß„Åô„ÄÇÂçòÁã¨„ÅßË©ï‰æ°„Åô„Çã„ÅÆ„ÅØÈÅ©Âàá„Åß„ÅØ„Å™„Åè„ÄÅÁ∑èÂà©Áõä„Å®„ÅÆÊØîÁéáÔºà„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„ÉºÔºâ„Çí‰Ωµ„Åõ„Å¶Ë©ï‰æ°„Åó„Åæ„Åô„ÄÇ',
    criteria: '„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„Éº„Åå1.1ÔΩû1.5„ÅØÊ®ôÊ∫ñ„ÄÅ1.5‰ª•‰∏ä„ÅØÂÆâÂÆö„ÄÅ2.0‰ª•‰∏ä„ÅØÂÑ™ÁßÄ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'Á¥îÂà©Áõä (Net Profit)': {
    desc: 'Á∑èÂà©Áõä„Åã„ÇâÁ∑èÊêçÂ§±„ÇíÂºï„ÅÑ„ÅüÂÆüË≥™ÁöÑ„Å™Âà©Áõä„Åß„Åô„ÄÇ',
    criteria: '„É™„Çπ„ÇØË≥áÁî£„Å´ÂØæ„Åó„Å¶Âπ¥Áéá10%‰ª•‰∏ä„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÂèñÂºïÂõûÊï∞ (Total Trades)': {
    desc: 'ÊúüÈñìÂÜÖ„ÅÆÂÖ®ÂèñÂºïÂõûÊï∞„ÇíË°®„Åó„Åæ„Åô„ÄÇ',
    criteria: '30ÔΩû50Âõû„ÅåÊúÄ‰ΩéÈôê„ÄÅ100Âõû‰ª•‰∏ä„Åß‰ø°È†ºÊÄß„ÅåÈ´ò„Åæ„Çä„Åæ„Åô„ÄÇ',
  },
  'ÂãùÁéá (Win Rate)': {
    desc: 'ÂÖ®ÂèñÂºï„Å´ÂØæ„Åô„ÇãÂãù„Å°„Éà„É¨„Éº„Éâ„ÅÆÂâ≤Âêà„Åß„Åô„ÄÇ',
    criteria: 'ÂãùÁéá30ÔΩû40%„ÅØÂèéÁõäÂåñÂèØËÉΩ„ÄÅ40ÔΩû50%„ÅØ‰∏ÄËà¨ÁöÑ„Å™ÁõÆÂÆâ„ÄÅ50%‰ª•‰∏ä„ÅØËâØÂ•Ω„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  '„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„Éº (Profit Factor)': {
    desc: 'Á∑èÂà©Áõä√∑Á∑èÊêçÂ§±„ÅÆÁµ∂ÂØæÂÄ§„ÅßË®àÁÆó„Åô„ÇãÊåáÊ®ô„Åß„Åô„ÄÇÈÅãÁî®„ÅÆÂÆâÂÆöÊÄß„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ',
    criteria: '1.1ÔΩû1.5„ÅØÊ®ôÊ∫ñ„ÄÅ1.5‰ª•‰∏ä„ÅØÂÆâÂÆö„ÄÅ2.0‰ª•‰∏ä„ÅØÂÑ™ÁßÄ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'Âπ≥ÂùáÂà©Áõä (Average Profit)': {
    desc: 'Âãù„Å°„Éà„É¨„Éº„Éâ1Âõû„ÅÇ„Åü„Çä„ÅÆÂπ≥ÂùáÂà©Áõä„Åß„Åô„ÄÇ',
    criteria: 'Âπ≥ÂùáÊêçÂ§±„ÅÆ1.5ÂÄç‰ª•‰∏ä„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'Âπ≥ÂùáÊêçÂ§± (Average Loss)': {
    desc: 'Ë≤†„Åë„Éà„É¨„Éº„Éâ1Âõû„ÅÇ„Åü„Çä„ÅÆÂπ≥ÂùáÊêçÂ§±„Åß„Åô„ÄÇ',
    criteria: '„É™„Çπ„ÇØË®±ÂÆπÈ°ç„ÅÆ2%‰ª•ÂÜÖ„ÅåÊé®Â•®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ßÂà©Áõä (Largest Profit)': {
    desc: 'Âçò‰∏Ä„Éà„É¨„Éº„Éâ„Åß„ÅÆÊúÄÂ§ß„ÅÆÂà©ÁõäÈ°ç„Åß„Åô„ÄÇ',
    criteria: 'Âπ≥ÂùáÂà©Áõä„ÅÆ3ÂÄç‰ª•ÂÜÖ„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ßÊêçÂ§± (Largest Loss)': {
    desc: 'Âçò‰∏Ä„Éà„É¨„Éº„Éâ„Åß„ÅÆÊúÄÂ§ß„ÅÆÊêçÂ§±È°ç„Åß„Åô„ÄÇ',
    criteria: 'Âπ≥ÂùáÊêçÂ§±„ÅÆ3ÂÄç‰ª•ÂÜÖ„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ßÈÄ£ÂãùÊï∞ (Max Consecutive Wins)': {
    desc: 'ÈÄ£Á∂ö„Åó„Å¶Âà©Áõä„ÇíÂá∫„Åó„ÅüÊúÄÂ§ßÂõûÊï∞„Åß„Åô„ÄÇ',
    criteria: 'ÂèñÂºïÂõûÊï∞„Å´ÂØæ„Åô„ÇãÊØîÁéá„ÅßË©ï‰æ°„Åô„Çã„ÅÆ„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ßÈÄ£ÊïóÊï∞ (Max Consecutive Losses)': {
    desc: 'ÈÄ£Á∂ö„Åó„Å¶ÊêçÂ§±„ÇíÂá∫„Åó„ÅüÊúÄÂ§ßÂõûÊï∞„Åß„Åô„ÄÇ',
    criteria: 'Ë≥áÈáëÁÆ°ÁêÜ‰∏ä„ÄÅ10Âõû‰ª•‰∏ã„ÅåÊúõ„Åæ„Åó„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ß„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ (Maximal Drawdown)': {
    desc: 'Ë≥áÈáëÊÆãÈ´ò„ÅÆ„Éî„Éº„ÇØ„Åã„ÇâÂ∫ïÂÄ§„Åæ„Åß„ÅÆÊúÄÂ§ß‰∏ãËêΩÈ°ç„Åß„Åô„ÄÇ',
    criteria: '10%‰ª•‰∏ã„ÅØÈùûÂ∏∏„Å´ÂÑ™ÁßÄ„ÄÅ10ÔΩû15%„ÅØÂÑ™ÁßÄ„ÄÅ15ÔΩû20%„ÅØË®±ÂÆπÁØÑÂõ≤„ÄÅ20%‰ª•‰∏ä„ÅØË¶ÅÊîπÂñÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  'ÊúÄÂ§ß„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ %': {
    desc: 'Ë≥áÈáëÊÆãÈ´ò„ÅÆ„Éî„Éº„ÇØ„Åã„ÇâÂ∫ïÂÄ§„Åæ„Åß„ÅÆÊúÄÂ§ß‰∏ãËêΩÁéá„Åß„Åô„ÄÇ',
    criteria: '10%‰ª•‰∏ã„ÅØÈùûÂ∏∏„Å´ÂÑ™ÁßÄ„ÄÅ10ÔΩû15%„ÅØÂÑ™ÁßÄ„ÄÅ15ÔΩû20%„ÅØË®±ÂÆπÁØÑÂõ≤„ÄÅ20%‰ª•‰∏ä„ÅØË¶ÅÊîπÂñÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
  '„É™„Çπ„ÇØ„É™„ÉØ„Éº„ÉâÊØîÁéá (Risk-Reward Ratio)': {
    desc: 'Âπ≥ÂùáÂà©Áõä√∑Âπ≥ÂùáÊêçÂ§±„ÅÆÁµ∂ÂØæÂÄ§„ÅßË®àÁÆó„Åô„ÇãÊåáÊ®ô„Åß„Åô„ÄÇ„É™„Çπ„ÇØ„Å´ÂØæ„Åô„Çã„É™„Çø„Éº„É≥„ÅÆÂäπÁéá„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ',
    criteria: '1:1.5‰ª•‰∏ä„ÅåÊúÄ‰Ωé„É©„Ç§„É≥„ÄÅ1:2ÔΩû1:5„ÅåÊúõ„Åæ„Åó„ÅÑ„ÄÅ5‰ª•‰∏ä„ÅØÈõ£ÊòìÂ∫¶„ÅåÈ´ò„ÅÑ„Å®„Åï„Çå„Åæ„Åô„ÄÇ',
  },
};
// StatCardÊã°ÂºµÔºöPopover„ÅßË™¨ÊòéË°®Á§∫
const StatCard = ({ title, value, unit = '' }: StatCardProps) => {
  const info = STAT_CARD_DESCRIPTIONS[title]
  return (
    <Popover>
      <PopoverTrigger asChild>
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 cursor-pointer hover:ring-2 hover:ring-blue-400 transition">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center gap-1">
            {title}
            {info && (
              <span className="ml-1 text-blue-400" aria-label="Ë™¨Êòé">üõà</span>
            )}
          </h3>
          <p className="text-2xl font-bold mt-2">
            {typeof value === 'number'
              ? (title.includes('Profit Factor') || title.includes('Risk-Reward Ratio')
                ? value.toFixed(2)
                : (unit === '%' ? formatPercent(value) : formatCurrency(value))
              )
              : value}
            {unit}
          </p>
        </div>
      </PopoverTrigger>
      {info && (
        <PopoverContent align="center" sideOffset={8} className="max-w-xs">
          <div className="text-sm font-bold mb-1">{title}</div>
          <div className="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-line mb-2">{info.desc}</div>
          <div className="text-xs text-blue-700 dark:text-blue-300">{info.criteria}</div>
        </PopoverContent>
      )}
    </Popover>
  )
}

// „Ç´„Çπ„Çø„É†Legend„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const CustomLegend = () => {
  const { theme } = useTheme();
  const chartColors = getChartColors(theme === 'system' && typeof window !== 'undefined'
    ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
    : theme);
  return (
    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 16 }}>
      <span style={{ display: 'flex', alignItems: 'center', gap: 4 }}>
        <span style={{ width: 18, height: 18, background: chartColors.winRate, display: 'inline-block', borderRadius: 3 }} />
        <span style={{ color: chartColors.winRate }}>ÂãùÁéá</span>
      </span>
      <span style={{ display: 'flex', alignItems: 'center', gap: 4 }}>
        <span style={{ width: 18, height: 18, background: `linear-gradient(90deg, ${chartColors.totalProfit} 50%, ${chartColors.loss} 50%)`, display: 'inline-block', borderRadius: 3, border: '1px solid #333' }} />
        <span style={{ color: chartColors.totalProfit }}>ÂêàË®àÂà©Áõä</span>
      </span>
    </div>
  );
};

export default function Dashboard() {
  const router = useRouter()
  const { theme } = useTheme();
  const chartColors = getChartColors(theme === 'system' && typeof window !== 'undefined'
    ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
    : theme);
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isFilterModalOpen, setIsFilterModalOpen] = useState(false)
  const [currentFilter, setCurrentFilter] = useState<TradeFilter>(DEFAULT_FILTER)
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [tradeRecords, setTradeRecords] = useState<TradeRecord[]>([]);
  const [tradeLoading, setTradeLoading] = useState(false);

  const fetchDashboardData = useCallback(async (userId: string, filter: TradeFilter) => {
    try {
      setLoading(true)
      const normalized = buildTradeFilterParams(filter)
      const queryParams = new URLSearchParams({ userId })

      if (normalized.types) normalized.types.forEach(t => queryParams.append('type[]', t))
      if (normalized.items) normalized.items.forEach(i => queryParams.append('items[]', i))
      if (normalized.startDate) queryParams.append('startDate', normalized.startDate.toISOString())
      if (normalized.endDate) queryParams.append('endDate', normalized.endDate.toISOString())
      if (typeof normalized.page === 'number') queryParams.append('page', normalized.page.toString())
      if (typeof normalized.pageSize === 'number') queryParams.append('pageSize', normalized.pageSize.toString())
      if (normalized.sortBy) queryParams.append('sortBy', normalized.sortBy)
      if (normalized.sortOrder) queryParams.append('sortOrder', normalized.sortOrder)
      if (typeof normalized.profitMin === 'number') queryParams.append('profitMin', normalized.profitMin.toString())
      if (typeof normalized.profitMax === 'number') queryParams.append('profitMax', normalized.profitMax.toString())

      const response = await fetch('/api/dashboard?' + queryParams.toString())

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }

      const data = await response.json()

      setDashboardData(data)
      setError(null)
    } catch (err) {
      console.error('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', err)
      setError('„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
    } finally {
      setLoading(false)
    }
  }, [])

  // „Éà„É¨„Éº„ÉâÂ±•Ê≠¥„ÅÆÂèñÂæó
  const fetchTradeRecords = useCallback(async (userId: string, filter: TradeFilter) => {
    try {
      setTradeLoading(true)
      const normalized = buildTradeFilterParams(filter)
      const queryParams = new URLSearchParams()
      queryParams.append('filter', JSON.stringify({
        ...normalized,
        page: normalized.page || 1,
        pageSize: normalized.pageSize || PAGINATION.DEFAULT_PAGE_SIZE,
        sortBy: 'openTime',
        sortOrder: 'desc'
      }))

      // Supabase„Çí‰ΩøÁî®„Åó„Å¶„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂèñÂæó
      const { data: { session } } = await supabase.auth.getSession();

      if (!session?.access_token) {
        throw new Error('Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô');
      }

      const response = await fetch('/api/trade-records?' + queryParams.toString(), {
        headers: {
          'Authorization': `Bearer ${session.access_token}`
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '„Éà„É¨„Éº„ÉâÂ±•Ê≠¥„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }

      const data = await response.json()
      setTradeRecords(data.records)
      setTotalPages(Math.ceil(data.total / data.pageSize))
    } catch (err) {
      console.error('„Éà„É¨„Éº„ÉâÂ±•Ê≠¥ÂèñÂæó„Ç®„É©„Éº:', err)
      setError('„Éà„É¨„Éº„ÉâÂ±•Ê≠¥„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
    } finally {
      setTradeLoading(false)
    }
  }, [])

  // „É¶„Éº„Ç∂„ÉºË™çË®º„Å®ID„ÅÆÂèñÂæó„Çí‰∏ÄÂÖÉÂåñ
  const checkAuth = useCallback(async () => {
    try {
      const { userId } = await getCurrentUserId()
      if (!userId) {
        router.push('/login')
        return null
      }
      return userId
    } catch (err) {
      console.error('Ë™çË®º„Ç®„É©„Éº:', err)
      router.push('/login')
      return null
    }
  }, [router])

  useEffect(() => {
    const initializeData = async () => {
      const currentUserId = await checkAuth()
      if (currentUserId) {
        fetchDashboardData(currentUserId, currentFilter)
        fetchTradeRecords(currentUserId, { ...currentFilter, page: currentPage, pageSize: PAGINATION.DEFAULT_PAGE_SIZE })
      }
    }
    initializeData()
  // NOTE: „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÅÆÊìç‰Ωú„Åß„ÅØÈõÜË®à„ÅÆÂÜçÂÆüË°å„Åå‰∏çË¶Å„Å™„Åü„ÇÅ„ÄÅ„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÅÆÊìç‰Ωú„Åß„ÅØÈõÜË®à„ÅÆÂÜçÂÆüË°å„Çí„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [checkAuth, currentFilter, fetchDashboardData, fetchTradeRecords])

  const handlePageChange = async (page: number) => {
    setCurrentPage(page)
    const userId = await checkAuth()
    if (userId) {
      fetchTradeRecords(userId, { ...currentFilter, page, pageSize: PAGINATION.DEFAULT_PAGE_SIZE })
    }
  }

  const handleFilterApply = async (filter: TradeFilter) => {
    setCurrentFilter(filter)
    setCurrentPage(1) // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®ÊôÇ„Å´„Éö„Éº„Ç∏„Çí1„Å´„É™„Çª„ÉÉ„Éà
  }

  if (loading) {
    // „Çπ„Ç±„É´„Éà„É≥UI
    return (
      <div className="container mx-auto px-4 py-8">
        {/* „Éò„ÉÉ„ÉÄ„Éº„Éª„Éï„Ç£„É´„Çø„Éº„Éú„Çø„É≥ */}
        <div className="flex justify-between items-center mb-6">
          <Skeleton className="h-8 w-1/3" />
          <div className="flex gap-2">
            <Skeleton className="h-10 w-20" />
          </div>
        </div>
        {/* „Çµ„Éû„É™„ÉºÁµ±Ë®à„Ç´„Éº„Éâ„ÅÆ„Çπ„Ç±„É´„Éà„É≥ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8">
          {Array.from({ length: 14 }).map((_, i) => (
            <Skeleton key={i} className="h-24 w-full" />
          ))}
        </div>
        {/* „Ç∞„É©„Éï„Çπ„Ç±„É´„Éà„É≥ */}
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
            <Skeleton className="h-6 w-1/4 mb-4" />
            <Skeleton className="h-80 w-full" />
          </div>
        ))}
        {/* „Éè„Ç§„É©„Ç§„Éà„Ç´„Éº„Éâ„ÅÆ„Çπ„Ç±„É´„Éà„É≥ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <Skeleton className="h-24 w-full" />
          <Skeleton className="h-24 w-full" />
        </div>
        {/* „ÉÜ„Éº„Éñ„É´„Çπ„Ç±„É´„Éà„É≥ */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
          <Skeleton className="h-6 w-1/4 mb-4" />
          <div className="overflow-x-auto">
            <table className="min-w-full border-collapse border border-gray-300 dark:border-gray-700">
              <thead>
                <tr>
                  {Array.from({ length: 14 }).map((_, i) => (
                    <th key={i} className="border p-2"><Skeleton className="h-4 w-16" /></th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: 8 }).map((_, row) => (
                  <tr key={row}>
                    {Array.from({ length: 14 }).map((_, col) => (
                      <td key={col} className="border p-2"><Skeleton className="h-4 w-16" /></td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <p className="text-red-500 mb-4">{error}</p>
        <button
          onClick={async () => {
            const { userId } = await getCurrentUserId()
            if (userId) {
              fetchDashboardData(userId, currentFilter)
            }
          }}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          ÂÜçË©¶Ë°å
        </button>
      </div>
    )
  }

  if (!dashboardData) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p>„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
      </div>
    )
  }

  const { summary, graphs } = dashboardData

  // --- ËøΩÂä†: ÊôÇÈñìÂ∏ØÂà•ÔºàÂ∏ÇÂ†¥Âå∫ÂàÜÔºâÊàêÁ∏æ„ÅÆÂèØË¶ñÂåñ ---
  const timeZoneStats = dashboardData.timeZoneStats || [];
  // ÂãùÁéá„ÅßÊúÄÂ§ß„ÅÆÂ∏ÇÂ†¥Âå∫ÂàÜ„ÇíÊäΩÂá∫
  const bestWinZone = timeZoneStats.reduce((max, z) => (z.winRate > (max?.winRate ?? -1) ? z : max), null as typeof timeZoneStats[0] | null);
  // ÂêàË®àÂà©Áõä„ÅßÊúÄÂ§ß„ÅÆÂ∏ÇÂ†¥Âå∫ÂàÜ„ÇíÊäΩÂá∫
  const bestProfitZone = timeZoneStats.reduce((max, z) => (z.totalProfit > (max?.totalProfit ?? -Infinity) ? z : max), null as typeof timeZoneStats[0] | null);

  // --- ËøΩÂä†: ÈÄöË≤®„Éö„Ç¢Âà•„ÉªÊõúÊó•Âà•ÊàêÁ∏æ„ÅÆÂèØË¶ñÂåñ ---
  const symbolStats = dashboardData.symbolStats || [];
  // Êúà„ÄúÈáë„ÅÆ„Åø
  const weekdayStats = (dashboardData.weekdayStats || []).filter(w => w.weekday >= 1 && w.weekday <= 5);

  // ÈÄöË≤®„Éö„Ç¢Âà•„Éè„Ç§„É©„Ç§„Éà
  const bestProfitSymbol = symbolStats.reduce((max, s) => (s.totalProfit > (max?.totalProfit ?? -Infinity) ? s : max), null as typeof symbolStats[0] | null);
  const worstProfitSymbol = symbolStats.reduce((min, s) => (s.totalProfit < (min?.totalProfit ?? Infinity) ? s : min), null as typeof symbolStats[0] | null);

  // ÊõúÊó•Âà•„Éè„Ç§„É©„Ç§„Éà
  const bestWinWeekday = weekdayStats.reduce((max, w) => (w.winRate > (max?.winRate ?? -1) ? w : max), null as typeof weekdayStats[0] | null);
  // ËøΩÂä†: ÊõúÊó•Âà•ÂêàË®àÂà©ÁõäÊúÄÂ§ß
  const bestProfitWeekday = weekdayStats.reduce((max, w) => (w.totalProfit > (max?.totalProfit ?? -Infinity) ? w : max), null as typeof weekdayStats[0] | null);

  // --- ËøΩÂä†: ÊõúÊó•√óÂ∏ÇÂ†¥Âå∫ÂàÜ„Éí„Éº„Éà„Éû„ÉÉ„ÉóÂèØË¶ñÂåñ ---
  const weekdayTimeZoneHeatmap = dashboardData.weekdayTimeZoneHeatmap || [];
  const heatmapZones = [
    { zone: 'tokyo', label: 'Êù±‰∫¨' },
    { zone: 'london', label: '„É≠„É≥„Éâ„É≥' },
    { zone: 'newyork', label: '„Éã„É•„Éº„É®„Éº„ÇØ' },
    { zone: 'other', label: '„Åù„ÅÆ‰ªñ' },
  ];
  // Êúà„ÄúÈáë„ÅÆ„Åø
  const heatmapWeekdays = ['Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë'];
  // 0„Äú100%„ÇíËµ§‚ÜíÈªÑ‚ÜíÁ∑ë„Åß„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥
  function winRateColor(rate: number) {
    // 0:Ëµ§ #f87171, 50:ÈªÑ #facc15, 100:Á∑ë #4ade80
    if (rate <= 50) {
      // Ëµ§‚ÜíÈªÑ
      const r = 248 + Math.round((250-248)*(rate/50));
      const g = 113 + Math.round((204-113)*(rate/50));
      const b = 113 + Math.round((21-113)*(rate/50));
      return `rgb(${r},${g},${b})`;
    } else {
      // ÈªÑ‚ÜíÁ∑ë
      const r = 250 + Math.round((74-250)*((rate-50)/50));
      const g = 204 + Math.round((222-204)*((rate-50)/50));
      const b = 21 + Math.round((128-21)*((rate-50)/50));
      return `rgb(${r},${g},${b})`;
    }
  }

  // ÈÄöË≤®„Éö„Ç¢Âà•Ê®™Ê£í„Ç∞„É©„Éï
  const symbolStatsWithColor = symbolStats.map(s => ({ ...s, barColor: s.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }));
  // ÊõúÊó•Âà•
  const weekdayStatsWithColor = weekdayStats.map(w => ({ ...w, barColor: w.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }));
  // ÊôÇÈñìÂ∏ØÂà•
  const timeZoneStatsWithColor = timeZoneStats.map(z => ({ ...z, barColor: z.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }));

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">„Éà„É¨„Éº„ÉâÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</h1>
        <div className="flex gap-2">
          <button
            onClick={() => setIsFilterModalOpen(true)}
            className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <Filter className="w-5 h-5" />
          </button>
        </div>
      </div>

      <FilterModal
        isOpen={isFilterModalOpen}
        onClose={() => setIsFilterModalOpen(false)}
        onApply={handleFilterApply}
        currentFilter={currentFilter}
      />

      {/* „Çµ„Éû„É™„ÉºÁµ±Ë®à */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8">
        <StatCard title="Á∑èÂà©Áõä (Gross Profit)" value={summary.grossProfit} unit="ÂÜÜ" />
        <StatCard title="Á∑èÊêçÂ§± (Gross Loss)" value={summary.grossLoss} unit="ÂÜÜ" />
        <StatCard title="Á¥îÂà©Áõä (Net Profit)" value={summary.netProfit} unit="ÂÜÜ" />
        <StatCard title="ÂèñÂºïÂõûÊï∞ (Total Trades)" value={summary.totalTrades} />
        <StatCard title="ÂãùÁéá (Win Rate)" value={summary.winRate} unit="%" />
        <StatCard title="„Éó„É≠„Éï„Ç£„ÉÉ„Éà„Éï„Ç°„ÇØ„Çø„Éº (Profit Factor)" value={summary.profitFactor} />
        <StatCard title="Âπ≥ÂùáÂà©Áõä (Average Profit)" value={summary.avgProfit} unit="ÂÜÜ" />
        <StatCard title="Âπ≥ÂùáÊêçÂ§± (Average Loss)" value={summary.avgLoss} unit="ÂÜÜ" />
        <StatCard title="ÊúÄÂ§ßÂà©Áõä (Largest Profit)" value={summary.largestProfit} unit="ÂÜÜ" />
        <StatCard title="ÊúÄÂ§ßÊêçÂ§± (Largest Loss)" value={summary.largestLoss} unit="ÂÜÜ" />
        <StatCard title="ÊúÄÂ§ßÈÄ£ÂãùÊï∞ (Max Consecutive Wins)" value={summary.maxWinStreak} />
        <StatCard title="ÊúÄÂ§ßÈÄ£ÊïóÊï∞ (Max Consecutive Losses)" value={summary.maxLossStreak} />
        {/* <StatCard title="ÊúÄÂ§ß„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ (Maximal Drawdown)" value={summary.maxDrawdown} unit="ÂÜÜ" />
        <StatCard title="ÊúÄÂ§ß„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ %" value={summary.maxDrawdownPercent} unit="%" /> */}
        <StatCard title="„É™„Çπ„ÇØ„É™„ÉØ„Éº„ÉâÊØîÁéá (Risk-Reward Ratio)" value={summary.riskRewardRatio} />
      </div>

      {/* Âà©ÁõäÊé®Áßª„Ç∞„É©„Éï */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">Âà©ÁõäÊé®Áßª</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={graphs.profitTimeSeries
                .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())}
              margin={{ top: 5, right: 30, left: 20, bottom: 15 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="date"
                tickFormatter={formatMonthDay}
                tick={{ fill: chartColors.label, fontSize: 12 }}
                tickMargin={10}
                interval="preserveStartEnd"
                minTickGap={50}
                angle={-45}
                textAnchor="end"
                height={60}
              />
              <YAxis
                tick={{ fill: chartColors.label, fontSize: 12 }}
                tickFormatter={(value) => value.toLocaleString('ja-JP')}
              />
              <Tooltip
                formatter={(value: number) => [`${value.toLocaleString('ja-JP')}ÂÜÜ`, '']}
                labelFormatter={(label: string) => formatDateOnly(new Date(label))}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.95)',
                  border: '1px solid #e2e8f0',
                  borderRadius: '4px',
                  padding: '8px',
                  color: chartColors.label,
                  boxShadow: '0 2px 5px rgba(0,0,0,0.1)'
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="cumulativeProfit"
                name="Á¥ØÁ©çÂà©Áõä"
                stroke={chartColors.totalProfit}
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* ÂãùÁéáÊé®Áßª„Ç∞„É©„Éï */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">ÂãùÁéáÊé®Áßª (ÊúàÂà•)</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={graphs.monthlyWinRates}
              margin={{ top: 5, right: 30, left: 20, bottom: 15 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="month"
                tickFormatter={formatYearMonth}
                tick={{ fill: chartColors.label, fontSize: 12 }}
                tickMargin={10}
              />
              <YAxis
                domain={[0, 100]}
                tick={{ fill: chartColors.label, fontSize: 12 }}
              />
              <Tooltip
                content={({ active, payload, label }) => {
                  if (active && payload && payload.length) {
                    // payload[0]?.payload?.trades „Åã„ÇâÁõ¥Êé•ÂèñÂæó
                    const trades = typeof payload[0]?.payload?.trades === 'number' && !isNaN(payload[0]?.payload?.trades)
                      ? payload[0].payload.trades
                      : 0;
                    const winRatePayload = payload.find(p => p.dataKey === 'winRate');
                    return (
                      <div className="bg-white p-2 border border-gray-200 rounded shadow text-gray-900">
                        <div className="text-base font-bold" style={{ color: chartColors.label }}>{formatYearMonthJP(label)}</div>
                        <div className="text-sm" style={{ color: chartColors.winRate }}>
                          ÂãùÁéá: {winRatePayload && typeof winRatePayload.value === 'number' ? winRatePayload.value.toFixed(2) : '-'}%
                        </div>
                        <div className="text-sm" style={{ color: chartColors.label }}>
                          ÂèñÂºïÂõûÊï∞: {trades}‰ª∂
                        </div>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Legend />
              <Bar
                dataKey="winRate"
                name="ÂãùÁéá"
                fill={chartColors.winRate}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* „Éâ„É≠„Éº„ÉÄ„Ç¶„É≥Êé®Áßª„Ç∞„É©„Éï */}
      {/* <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥Êé®Áßª</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={graphs.drawdownTimeSeries.map(item => ({
                ...item,
                // ÂÄ§„ÅÆÊ§úË®º„Å®Âà∂Èôê„ÇíËøΩÂä†
                drawdown: Math.max(0, item.drawdown),
                // „Éâ„É≠„Éº„ÉÄ„Ç¶„É≥Áéá„ÅØÁêÜË´ñ‰∏ä0-100%„Å†„Åå„ÄÅ„Éá„Éº„Çø„Å´Áï∞Â∏∏„Åå„ÅÇ„Å£„ÅüÂ†¥Âêà„Å´ÂÇô„Åà„Å¶Âà∂Èôê
                drawdownPercent: Math.min(100, Math.max(0, Number(item.drawdownPercent.toFixed(2))))
              }))}
              margin={{ top: 5, right: 30, left: 20, bottom: 15 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="date"
                tickFormatter={formatMonthDay}
                tick={{ fill: chartColors.label, fontSize: 12 }}
                tickMargin={10}
              />
              <YAxis
                yAxisId="left"
                orientation="left"
                tickFormatter={(value: number) => `${value.toLocaleString()}ÂÜÜ`}
                tick={{ fill: chartColors.label, fontSize: 12 }}
              />
              <YAxis
                yAxisId="right"
                orientation="right"
                domain={[0, 100]}
                tickFormatter={(value: number) => `${value}%`}
                allowDataOverflow={true}
                tick={{ fill: chartColors.label, fontSize: 12 }}
              />
              <Tooltip
                content={({ active, payload, label }: TooltipProps<ValueType, NameType>) => {
                  if (active && payload && payload.length >= 2) {
                    // formatDateOnly„Çí‰ΩøÁî®„Åó„Å¶Êó•‰ªò„ÇíÊó•Êú¨Ë™ûË°®Á§∫„Å´
                    const date = formatDateOnly(new Date(label));
                    const drawdownValue = Number(payload[0]?.value || 0);
                    const percentValue = Number(payload[1]?.value || 0);
                    const customPayload = payload[0] as CustomPayload;
                    const cumulativeProfit = customPayload?.payload?.cumulativeProfit || 0;
                    const peakValue = customPayload?.payload?.peak || 0;

                    return (
                      <div className="bg-white p-2 border border-gray-200 rounded shadow text-gray-900">
                        <p className="text-sm font-medium" style={{ color: chartColors.label }}>{date}</p>
                        <p className="text-sm" style={{ color: chartColors.drawdown }}>
                          „Éâ„É≠„Éº„ÉÄ„Ç¶„É≥: {formatCurrency(drawdownValue)}ÂÜÜ
                        </p>
                        <p className="text-sm" style={{ color: chartColors.drawdownPercent }}>
                          „Éâ„É≠„Éº„ÉÄ„Ç¶„É≥Áéá: {formatPercent(percentValue)}%
                        </p>
                        <p className="text-sm" style={{ color: chartColors.totalProfit }}>Á¥ØÁ©çÂà©Áõä: {formatCurrency(cumulativeProfit)}ÂÜÜ</p>
                        <p className="text-sm" style={{ color: chartColors.label }}>„Éî„Éº„ÇØ: {formatCurrency(peakValue)}ÂÜÜ</p>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Legend
                formatter={(value) => {
                  if (value === 'drawdown') return '„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ (ÂÜÜ)';
                  if (value === 'drawdownPercent') return '„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥ (%)';
                  return value;
                }}
              />
              <Line
                type="monotone"
                dataKey="drawdown"
                name="„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥"
                stroke={chartColors.drawdown}
                yAxisId="left"
                dot={false}
                activeDot={{ r: 8 }}
              />
              <Line
                type="monotone"
                dataKey="drawdownPercent"
                name="„Éâ„É≠„Éº„ÉÄ„Ç¶„É≥%"
                stroke={chartColors.drawdownPercent}
                yAxisId="right"
                dot={false}
                activeDot={{ r: 8 }}
                strokeWidth={2}
                isAnimationActive={false}
                connectNulls={true}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div> */}

      {/* --- ÊôÇÈñìÂ∏ØÂà•„Éè„Ç§„É©„Ç§„Éà„Ç´„Éº„Éâ --- */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-blue-50 dark:bg-blue-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄ„ÇÇÂãùÁéá„ÅåÈ´ò„ÅÑÂ∏ÇÂ†¥</div>
          <div className="text-lg font-bold">{bestWinZone ? bestWinZone.label : '-'}</div>
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-300">{bestWinZone ? `${bestWinZone.winRate.toFixed(1)}%` : '-'}</div>
        </div>
        <div className="bg-green-50 dark:bg-green-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄ„ÇÇÂêàË®àÂà©Áõä„ÅåÈ´ò„ÅÑÂ∏ÇÂ†¥</div>
          <div className="text-lg font-bold">{bestProfitZone ? bestProfitZone.label : '-'}</div>
          <div className="text-2xl font-bold text-green-600 dark:text-green-300">{bestProfitZone ? `${bestProfitZone.totalProfit.toLocaleString()}ÂÜÜ` : '-'}</div>
        </div>
      </div>

      {/* --- ÊôÇÈñìÂ∏ØÂà•„Éê„Éº„ÉÅ„É£„Éº„Éà --- */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">ÊôÇÈñìÂ∏ØÂà•ÔºàÂ∏ÇÂ†¥Âå∫ÂàÜÔºâÊàêÁ∏æ</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={timeZoneStatsWithColor} margin={{ top: 5, right: 30, left: 20, bottom: 15 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="label" tick={{ fill: chartColors.label, fontSize: 12 }} tickMargin={10} />
              <YAxis yAxisId="left" orientation="left" tickFormatter={(v) => `${v}%`} tick={{ fill: chartColors.label, fontSize: 12 }} />
              <YAxis yAxisId="right" orientation="right" tickFormatter={(v) => `${v.toLocaleString()}ÂÜÜ`} tick={{ fill: chartColors.label, fontSize: 12 }} />
              <Tooltip
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0]?.payload;
                    return (
                      <div className="bg-white p-2 border border-gray-200 rounded shadow text-gray-900">
                        <div className="text-base font-bold" style={{ color: chartColors.label }}>{data.label}</div>
                        <div className="text-sm" style={{ color: chartColors.winRate }}>ÂãùÁéá: {typeof data.winRate === 'number' ? data.winRate.toFixed(1) : '-'}%</div>
                        <div className="text-sm" style={{ color: data.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }}>ÂêàË®àÂà©Áõä: {typeof data.totalProfit === 'number' ? data.totalProfit.toLocaleString() : '-'}ÂÜÜ</div>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Legend content={CustomLegend} />
              <Bar yAxisId="left" dataKey="winRate" name="ÂãùÁéá" fill={chartColors.winRate} radius={[4, 4, 0, 0]} />
              <Bar yAxisId="right" dataKey="totalProfit" name="ÂêàË®àÂà©Áõä" radius={[4, 4, 0, 0]}>
                {timeZoneStatsWithColor.map((entry, idx) => (
                  <Cell key={idx} fill={entry.barColor} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* --- ÈÄöË≤®„Éö„Ç¢Âà•„Éè„Ç§„É©„Ç§„Éà„Ç´„Éº„Éâ --- */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-blue-50 dark:bg-blue-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄÂ§öÂà©Áõä„Éö„Ç¢</div>
          <div className="text-lg font-bold">{bestProfitSymbol ? bestProfitSymbol.symbol : '-'}</div>
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-300">{bestProfitSymbol ? `${bestProfitSymbol.totalProfit.toLocaleString()}ÂÜÜ` : '-'}</div>
        </div>
        <div className="bg-red-50 dark:bg-red-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄÂ§ßÊêçÂ§±„Éö„Ç¢</div>
          <div className="text-lg font-bold">{worstProfitSymbol ? worstProfitSymbol.symbol : '-'}</div>
          <div className="text-2xl font-bold text-red-600 dark:text-red-300">{worstProfitSymbol ? `${worstProfitSymbol.totalProfit.toLocaleString()}ÂÜÜ` : '-'}</div>
        </div>
      </div>

      {/* --- ÈÄöË≤®„Éö„Ç¢Âà•Ê®™Ê£í„Ç∞„É©„Éï --- */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">ÈÄöË≤®„Éö„Ç¢Âà•ÊàêÁ∏æ</h2>
        <div className="h-80 overflow-x-auto">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={symbolStatsWithColor} margin={{ top: 5, right: 30, left: 20, bottom: 15 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="symbol" tick={{ fill: chartColors.label, fontSize: 12 }} tickMargin={10} />
              <YAxis yAxisId="left" orientation="left" domain={[0, 100]} tickFormatter={(v) => `${v}%`} tick={{ fill: chartColors.label, fontSize: 12 }} />
              <YAxis yAxisId="right" orientation="right" tick={{ fill: chartColors.label, fontSize: 12 }} />
              <Tooltip
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0]?.payload;
                    return (
                      <div className="bg-white p-2 border border-gray-200 rounded shadow text-gray-900">
                        <div className="text-base font-bold" style={{ color: chartColors.symbol }}>{data.symbol}</div>
                        <div className="text-sm" style={{ color: chartColors.winRate }}>ÂãùÁéá: {typeof data.winRate === 'number' ? data.winRate.toFixed(1) : '-'}%</div>
                        <div className="text-sm" style={{ color: data.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }}>ÂêàË®àÂà©Áõä: {typeof data.totalProfit === 'number' ? data.totalProfit.toLocaleString() : '-'}ÂÜÜ</div>
                        <div className="text-sm" style={{ color: chartColors.label }}>ÂèñÂºïÊï∞: {data.trades}</div>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Legend content={CustomLegend} />
              <Bar yAxisId="left" dataKey="winRate" name="ÂãùÁéá" fill={chartColors.winRate} radius={[4,4,0,0]} />
              <Bar yAxisId="right" dataKey="totalProfit" name="ÂêàË®àÂà©Áõä" radius={[4,4,0,0]}>
                {symbolStatsWithColor.map((entry, idx) => (
                  <Cell key={idx} fill={entry.barColor} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* --- ÊõúÊó•Âà•„Éè„Ç§„É©„Ç§„Éà„Ç´„Éº„Éâ --- */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="bg-blue-50 dark:bg-blue-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄ„ÇÇÂãùÁéá„ÅåÈ´ò„ÅÑÊõúÊó•</div>
          <div className="text-lg font-bold">{bestWinWeekday ? bestWinWeekday.label : '-'}</div>
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-300">{bestWinWeekday ? `${bestWinWeekday.winRate.toFixed(1)}%` : '-'}</div>
        </div>
        {/* ËøΩÂä†: ÊúÄ„ÇÇÂêàË®àÂà©Áõä„ÅåÈ´ò„ÅÑÊõúÊó•„Ç´„Éº„Éâ */}
        <div className="bg-green-50 dark:bg-green-900 rounded-lg shadow p-4 flex flex-col items-center">
          <div className="text-sm text-gray-500 mb-1">ÊúÄ„ÇÇÂêàË®àÂà©Áõä„ÅåÈ´ò„ÅÑÊõúÊó•</div>
          <div className="text-lg font-bold">{bestProfitWeekday ? bestProfitWeekday.label : '-'}</div>
          <div className="text-2xl font-bold text-green-600 dark:text-green-300">{bestProfitWeekday ? `${bestProfitWeekday.totalProfit.toLocaleString()}ÂÜÜ` : '-'}</div>
        </div>
      </div>

      {/* --- ÊõúÊó•Âà•„Éê„Éº„ÉÅ„É£„Éº„Éà --- */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">ÊõúÊó•Âà•ÊàêÁ∏æ</h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={weekdayStatsWithColor} margin={{ top: 5, right: 30, left: 20, bottom: 15 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="label" tick={{ fill: chartColors.label, fontSize: 12 }} tickMargin={10} />
              <YAxis yAxisId="left" orientation="left" tickFormatter={(v) => `${v}%`} tick={{ fill: chartColors.label, fontSize: 12 }} />
              <YAxis yAxisId="right" orientation="right" tickFormatter={(v) => `${v.toLocaleString()}ÂÜÜ`} tick={{ fill: chartColors.label, fontSize: 12 }} />
              <Tooltip
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0]?.payload;
                    return (
                      <div className="bg-white p-2 border border-gray-200 rounded shadow text-gray-900">
                        <div className="text-base font-bold" style={{ color: chartColors.label }}>{data.label}</div>
                        <div className="text-sm" style={{ color: chartColors.winRate }}>ÂãùÁéá: {typeof data.winRate === 'number' ? data.winRate.toFixed(1) : '-'}%</div>
                        <div className="text-sm" style={{ color: data.totalProfit < 0 ? CHART_COLORS.loss : CHART_COLORS.totalProfit }}>ÂêàË®àÂà©Áõä: {typeof data.totalProfit === 'number' ? data.totalProfit.toLocaleString() : '-'}ÂÜÜ</div>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Legend content={CustomLegend} />
              <Bar yAxisId="left" dataKey="winRate" name="ÂãùÁéá" fill={chartColors.winRate} radius={[4,4,0,0]} />
              <Bar yAxisId="right" dataKey="totalProfit" name="ÂêàË®àÂà©Áõä" radius={[4,4,0,0]}>
                {weekdayStatsWithColor.map((entry, idx) => (
                  <Cell key={idx} fill={entry.barColor} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* --- ÊõúÊó•√óÂ∏ÇÂ†¥Âå∫ÂàÜ„Éí„Éº„Éà„Éû„ÉÉ„Éó --- */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-8">
        <h2 className="text-xl font-semibold mb-4">ÊõúÊó•√óÂ∏ÇÂ†¥Âå∫ÂàÜ„Éí„Éº„Éà„Éû„ÉÉ„ÉóÔºàÂãùÁéá%Ôºâ</h2>
        <div className="overflow-x-auto">
          <svg width={heatmapWeekdays.length * 60 + 120} height={heatmapZones.length * 50 + 60}>
            {/* ÊõúÊó•„É©„Éô„É´ */}
            {heatmapWeekdays.map((w, i) => (
              <text key={w} x={120 + i * 60 + 30} y={40} textAnchor="middle" fontSize="14" fill={chartColors.label}>{w}</text>
            ))}
            {/* Â∏ÇÂ†¥Âå∫ÂàÜ„É©„Éô„É´ */}
            {heatmapZones.map((z, j) => (
              <text key={z.zone} x={100} y={80 + j * 50 + 25} textAnchor="end" fontSize="14" fill={chartColors.label}>{z.label}</text>
            ))}
            {/* „Çª„É´ */}
            {heatmapZones.map((z, j) => heatmapWeekdays.map((w, i) => {
              // i: 0„Äú4ÔºàÊúà„ÄúÈáëÔºâ
              const cell = weekdayTimeZoneHeatmap.find(c => c.zone === z.zone && c.weekday === (i+1));
              const rate = cell ? cell.winRate : 0;
              return (
                <g key={z.zone + w}>
                  <rect x={120 + i * 60} y={60 + j * 50} width={60} height={50} rx={8} fill={winRateColor(rate)} stroke={chartColors.label} />
                  <text x={120 + i * 60 + 30} y={60 + j * 50 + 28} textAnchor="middle" fontSize="16" fill={chartColors.label} fontWeight="bold">
                    {cell ? `${rate.toFixed(0)}%` : '-'}
                  </text>
                  <text x={120 + i * 60 + 30} y={60 + j * 50 + 44} textAnchor="middle" fontSize="11" fill={chartColors.label}>
                    {cell && cell.trades > 0 ? `${cell.trades}‰ª∂` : ''}
                  </text>
                </g>
              );
            }))}
          </svg>
        </div>
      </div>

      {/* „Éà„É¨„Éº„ÉâÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´ */}
      {/* 640pxÊú™Ê∫Ä„Åß„ÅØÈùûË°®Á§∫„ÄÅ640px‰ª•‰∏ä„ÅßË°®Á§∫ */}
      <div className="hidden sm:block">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
          <h2 className="text-xl font-semibold mb-4">„Éà„É¨„Éº„ÉâÂ±•Ê≠¥</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full border-collapse border border-gray-300 dark:border-gray-700">
              <thead>
                <tr className="bg-gray-100 dark:bg-gray-800">
                  <th className="border p-2 text-left">Êó•ÊôÇ(Êó•Êú¨ÊôÇÈñì)</th>
                  <th className="border p-2 text-left">„ÉÅ„Ç±„ÉÉ„Éà</th>
                  <th className="border p-2 text-left">„Çø„Ç§„Éó</th>
                  <th className="border p-2 text-right">ÂèñÂºï„Çµ„Ç§„Ç∫</th>
                  <th className="border p-2 text-left">ÈÄöË≤®„Éö„Ç¢</th>
                  <th className="border p-2 text-right">„Ç®„É≥„Éà„É™„Éº‰æ°Ê†º</th>
                  <th className="border p-2 text-right">ÊêçÂàá‰æ°Ê†º</th>
                  <th className="border p-2 text-right">Âà©Á¢∫‰æ°Ê†º</th>
                  <th className="border p-2 text-left">Ê±∫Ê∏àÊó•ÊôÇ</th>
                  <th className="border p-2 text-right">Ê±∫Ê∏à‰æ°Ê†º</th>
                  <th className="border p-2 text-right">ÊâãÊï∞Êñô</th>
                  <th className="border p-2 text-right">Á®éÈáë</th>
                  <th className="border p-2 text-right">„Çπ„ÉØ„ÉÉ„Éó</th>
                  <th className="border p-2 text-right">ÊêçÁõä</th>
                </tr>
              </thead>
              <tbody>
                {tradeRecords.slice().map((item, idx) => {
                  const trade = item as TradeRecord;

                  return (
                    <tr key={idx} className={idx % 2 === 0 ? "bg-white dark:bg-gray-900" : "bg-gray-50 dark:bg-gray-800"}>
                      <td className="border p-2">{trade.openTime}</td>
                      <td className="border p-2">{trade.ticket}</td>
                      <td className="border p-2 capitalize">{trade.type || '-'}</td>
                      <td className="border p-2 text-right">{trade.size}</td>
                      <td className="border p-2">{trade.item || '-'}</td>
                      <td className="border p-2 text-right">{trade.openPrice}</td>
                      <td className="border p-2 text-right">{trade.stopLoss ?? '-'}</td>
                      <td className="border p-2 text-right">{trade.takeProfit ?? '-'}</td>
                      <td className="border p-2">{trade.closeTime ?trade.closeTime : '-'}</td>
                      <td className="border p-2 text-right">{trade.closePrice}</td>
                      <td className="border p-2 text-right">{trade.commission ?? '-'}</td>
                      <td className="border p-2 text-right">{trade.taxes ?? '-'}</td>
                      <td className="border p-2 text-right">{trade.swap ?? '-'}</td>
                      <td className="border p-2 text-right">{trade.profit}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          {/* „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„Ç≥„É≥„Éà„É≠„Éº„É´ */}
          <div className="mt-4 flex justify-center items-center gap-2">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1 || tradeLoading}
              className={`px-3 py-1 rounded ${
                currentPage === 1 || tradeLoading
                  ? 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              Ââç„Å∏
            </button>
            <span className="text-sm text-gray-600 dark:text-gray-300">
              {currentPage} / {totalPages}
            </span>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages || tradeLoading}
              className={`px-3 py-1 rounded ${
                currentPage === totalPages || tradeLoading
                  ? 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              Ê¨°„Å∏
            </button>
          </div>
        </div>
      </div>
      {/* 640pxÊú™Ê∫Ä„Åß„ÅÆ„ÅøË°®Á§∫„Åï„Çå„ÇãÊ°àÂÜÖÊñá */}
      <div className="block sm:hidden">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center">
          <p className="text-gray-700 dark:text-gray-200 text-base font-medium">
            „Éà„É¨„Éº„ÉâÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´„ÅØÁîªÈù¢ÂπÖ640px‰ª•‰∏ä„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ
          </p>
        </div>
      </div>
    </div>
  )
}
